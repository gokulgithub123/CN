SERVER

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>

#define MAX_BUFFER_SIZE 1024

char* bit_stuffing(const char* data) {
    char* stuffed_data = (char*)malloc(MAX_BUFFER_SIZE);
    int consecutive_ones = 0;
    int stuffed_index = 0;

    for (int i = 0; i < strlen(data); i++) {
        if (data[i] == '1') {
            consecutive_ones++;
            if (consecutive_ones == 5) {
                stuffed_data[stuffed_index++] = '1';
                stuffed_data[stuffed_index++] = '0';
                consecutive_ones = 0;
            } else {
                stuffed_data[stuffed_index++] = '1';
            }
        } else {
            consecutive_ones = 0;
            stuffed_data[stuffed_index++] = '0';
        }
    }

    stuffed_data[stuffed_index] = '\0';
    return stuffed_data;
}

int main() {
    int server_port = 3992;
    char buffer[MAX_BUFFER_SIZE];
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_addr_len = sizeof(client_addr);

    int server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket == -1) {
        perror("Error creating socket");
        return 1;
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(server_port);
    server_addr.sin_addr.s_addr = INADDR_ANY;

    if (bind(server_socket, (struct sockaddr*)&server_addr, sizeof(server_addr)) == -1) {
        perror("Error binding");
        return 1;
    }

    if (listen(server_socket, 5) == -1) {
        perror("Error listening");
        return 1;
    }

    printf("Server is ready to listen:\n");

    while (1) {
        int client_socket = accept(server_socket, (struct sockaddr*)&client_addr, &client_addr_len);
        if (client_socket == -1) {
            perror("Error accepting connection");
            return 1;
        }

        printf("Accepted connection from: %s:%d\n", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));

        int data_len = recv(client_socket, buffer, sizeof(buffer), 0);
        if (data_len <= 0) {
            perror("Error receiving data");
            close(client_socket);
            continue;
        }

        buffer[data_len] = '\0';
        printf("Received binary data from the client: %s\n", buffer);

        char* stuffed_data = bit_stuffing(buffer);
        printf("Bit-stuffed binary data to send back: %s\n", stuffed_data);

        send(client_socket, stuffed_data, strlen(stuffed_data), 0);
        free(stuffed_data);

        close(client_socket);
    }

    close(server_socket);
    return 0;
}


CLIENT

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>

#define SERVER_IP "127.0.0.1"
#define SERVER_PORT 3992
#define MAX_BUFFER_SIZE 1024

int main() {
    int client_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (client_socket == -1) {
        perror("Error creating socket");
        return 1;
    }

    struct sockaddr_in server_addr;
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(SERVER_PORT);
    inet_pton(AF_INET, SERVER_IP, &server_addr.sin_addr);

    if (connect(client_socket, (struct sockaddr*)&server_addr, sizeof(server_addr)) == -1) {
        perror("Error connecting to the server");
        close(client_socket);
        return 1;
    }

    char binary_data[MAX_BUFFER_SIZE];
    printf("Enter binary data to send to the server side: ");
    fgets(binary_data, sizeof(binary_data), stdin);
    binary_data[strcspn(binary_data, "\n")] = '\0'; // Remove trailing newline from user input

    printf("Sending binary data to the server: %s\n", binary_data);

    send(client_socket, binary_data, strlen(binary_data), 0);

    char buffer[MAX_BUFFER_SIZE];
    int data_len = recv(client_socket, buffer, sizeof(buffer) - 1, 0);
    if (data_len <= 0) {
        perror("Error receiving data");
        close(client_socket);
        return 1;
    }

    buffer[data_len] = '\0';
    printf("Received bit-stuffed binary data from the server side: %s\n", buffer);

    close(client_socket);
    return 0;
}

