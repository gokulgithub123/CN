auth_server

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <errno.h>
#define AUTHPORT 1754
extern int errno;
int main() {
	int socketfd = 0, clientfd = 0, sentbytes, recvbytes;
	socklen_t length = sizeof(struct sockaddr_in);
	struct sockaddr_in host_addr, client_addr;
	char buffer[20];
	socketfd = socket(AF_INET, SOCK_DGRAM, 0);
	if(socketfd < 0) {
		fprintf(stderr, "Error in socket creation.\n");
		return -1;
	}
	host_addr.sin_family = AF_INET;
	host_addr.sin_port = htons(AUTHPORT);
	inet_pton(AF_INET, "127.0.0.1", &host_addr.sin_addr);
	if(bind(socketfd, (struct sockaddr*)&host_addr, sizeof(host_addr)) < 0) {
		fprintf(stderr, "Error in binding port to socket.\n");
		return -1;
	}
	while(1) {
		recvbytes = recvfrom(socketfd, buffer, sizeof(buffer), 0, (struct sockaddr*)&client_addr, &length);
		if(strncmp(buffer, "exit", sizeof("exit")) == 0){
			printf("exiting...\n");
			break;
		}
		fprintf(stdout, "Request received for : %s.\n", buffer);
		FILE* fd = fopen("auth.txt", "r");
		if(!fd) {
			fprintf(stderr, "Could not access DNS records.\n");
			sendto(socketfd, "ERROR", strlen("ERROR") + 1, 0, (struct sockaddr*)&client_addr, length);
			continue;
		}
		char linebuff[40], filebuff[400], ip[20], tempbuff[40], lastbuff[40];
		char *temp, *iptemp;
		int flag = 0, i;
		linebuff[0] = '\0';
		lastbuff[0] = '\0';
		filebuff[0] = '\0';
		ip[0] = '\0';
		while(fgets(linebuff, sizeof(linebuff), fd) ) {
			strcpy(tempbuff, linebuff);
			temp = strtok(tempbuff, " ");
			if(flag == 0 && strncmp(temp, buffer, strlen(temp)) == 0) {
				flag = 1;
				strcpy(lastbuff, linebuff);
				iptemp = strtok(NULL, "\n");
				for(i = 0; *iptemp != '\0'; i++, iptemp++)
					ip[i] = *iptemp;
				ip[i] = '\0';
			}
			else {
				strcat(filebuff, linebuff);
			}
		}
		fclose(fd);
		if(flag == 0) {
			sentbytes = sendto(socketfd, "404", strlen("404") + 1, 0, (struct sockaddr*)&client_addr, length);
			printf("not found....\n");
		}
		else {
			int fdes = open("auth.txt", O_WRONLY);
			strcat(filebuff, lastbuff);
			write(fdes, filebuff, strlen(filebuff));
			close(fdes);
			fprintf(stdout, "Response : %s.\n\n", ip);
			sentbytes = sendto(socketfd, ip, strlen(ip) + 1, 0, (struct sockaddr*)&client_addr, length);
		}
	}
	close(socketfd);
	return 0;
}


auth.txt

drive.google.com 56.98.23.123
www.google.com 67.74.45.135
mail.google.com 45.16.75.24


client.c

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#define LOCALDNS 1760
int main() {
	int socketfd = 0, sentbytes, recvbytes;
	struct sockaddr_in host_addr;
	char input[20], buffer[20];
	socketfd = socket(AF_INET, SOCK_DGRAM, 0);
	if(socketfd < 0) {
		fprintf(stderr, "Error in socket creation.\n");
		return -1;
	}
	host_addr.sin_family = AF_INET;
	host_addr.sin_port = htons(LOCALDNS);
	inet_pton(AF_INET, "127.0.0.1", &host_addr.sin_addr);
	while(1) {
		fprintf(stdout, ">> Enter the HostName: ");
		scanf("%s", input);
		sentbytes = sendto(socketfd, input, strlen(input) + 1, 0, (struct sockaddr*)&host_addr, sizeof(host_addr));
		if(strncmp(input, "exit", sizeof("exit")) == 0)
			break;
		recvbytes = recvfrom(socketfd, buffer, sizeof(buffer), 0, NULL, NULL);
		printf("SERVER IP OF %s : %s\n\n", input, buffer);
	}
	close(socketfd);
	return 0;
}



local_server.c

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <errno.h>
#define ROOTPORT 1752
#define TLDPORT 1756
#define AUTHPORT 1754
#define LOCALPORT 1760
int main() {
        int socketfd = 0, localfd = 0;
        int rootfd = 0, tldfd = 0, authfd = 0;
        socklen_t length = sizeof(struct sockaddr_in);
        struct sockaddr_in host_addr, root_addr, tld_addr, auth_addr, client_addr;
        char buffer[512], root[20], tld[30], auth[100];
        char rootip[30], tldip[30], authip[30];
        int recvbytes, sentbytes;
        socketfd = socket(AF_INET, SOCK_DGRAM, 0);
        if(socketfd < 0) {
                fprintf(stderr, "Error in socket creation.\n");
                return -1;
        }
        host_addr.sin_family = AF_INET;
        host_addr.sin_port = htons(LOCALPORT);
        inet_pton(AF_INET, "127.0.0.1", &host_addr.sin_addr);
        if(bind(socketfd, (struct sockaddr*)&host_addr, sizeof(host_addr)) < 0) {
                fprintf(stderr, "Error in binding port to socket.\n");
                return -1;
        }
  while(1) {
                recvbytes = recvfrom(socketfd, buffer, sizeof(buffer), 0, (struct sockaddr*)&client_addr, &length);
                if(strncmp(buffer, "exit", sizeof("exit")) == 0){
                        strcpy(root,buffer);
                        strcpy(auth,buffer);
                        strcpy(tld,buffer);
                        printf("exiting...\n");
                        break;
                }
                else{
                        fprintf(stdout, "Request from client : %s\n", buffer);
                        strcpy(auth, buffer);
                        int i = 0, j = 0, k = 0;
                        while(buffer[i++] != '.');
                        while(buffer[i] != '.') {
                                tld[j++] = buffer[i++];
                        }
                tld[j++] = buffer[i++];
                while(buffer[i] != ' ' && buffer[i] != '\0') {
                        tld[j++] = buffer[i];
                        root[k++] = buffer[i];
                        i++;
                }
                tld[j] = '\0';
                root[k] = '\0';
                }
        rootfd = socket(AF_INET, SOCK_DGRAM, 0);
        if(rootfd < 0){
                fprintf(stderr, "Error in socket creation.\n");
                return -1;
        }
 root_addr.sin_family = AF_INET;
        root_addr.sin_port = htons(ROOTPORT);
        inet_pton(AF_INET, "127.0.0.1", &root_addr.sin_addr);
        sentbytes = sendto(rootfd, root, strlen(root) + 1, 0, (struct sockaddr*)&root_addr, length);
       recvbytes = recvfrom(rootfd, rootip, sizeof(rootip), 0, NULL, NULL);
       fprintf(stdout, "TLD server IP for %s: %s.\n", root, rootip);
       close(rootfd);
       /*TLD DNS*/
        tldfd = socket(AF_INET, SOCK_DGRAM, 0);
        if(tldfd < 0) {
                    fprintf(stderr, "Error in socket creation.\n");
                    return -1;
        }
        tld_addr.sin_family = AF_INET;
        tld_addr.sin_port = htons(TLDPORT);
        inet_pton(AF_INET, "127.0.0.1", &tld_addr.sin_addr);
        sentbytes = sendto(tldfd, tld, strlen(tld) + 1, 0, (struct sockaddr*)&tld_addr, length);
        recvbytes = recvfrom(tldfd, tldip, sizeof(tldip), 0, NULL, NULL);
        fprintf(stdout, "Auth server IP for %s: %s.\n", tld, tldip);
        close(tldfd);
        /*AUTH DNS*/
        authfd = socket(AF_INET, SOCK_DGRAM, 0);
        if(authfd < 0) {
                fprintf(stderr, "Error in socket creation.\n");
                return -1;
        }
        auth_addr.sin_family = AF_INET;
        auth_addr.sin_port = htons(AUTHPORT);
        inet_pton(AF_INET, "127.0.0.1", &auth_addr.sin_addr);
        sentbytes = sendto(authfd, auth, strlen(auth) + 1, 0, (struct sockaddr*)&auth_addr, length);
        recvbytes = recvfrom(authfd, authip, sizeof(authip), 0, NULL, NULL);
        fprintf(stdout, "Server ip for %s: %s.\n\n", auth, authip);
        close(authfd);
        sentbytes = sendto(socketfd, authip, strlen(authip) + 1, 0, (struct sockaddr*)&client_addr, length);
        }
close(socketfd);
        return 0;
}



root_server

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <errno.h>
#define ROOTPORT 1752
extern int errno;
int main() {
	int socketfd = 0, clientfd = 0, sentbytes, recvbytes;
	socklen_t length = sizeof(struct sockaddr_in);
	struct sockaddr_in host_addr, client_addr;
	char buffer[20];
	socketfd = socket(AF_INET, SOCK_DGRAM, 0);
	if(socketfd < 0) {
		fprintf(stderr, "Error in socket creation.\n");
		return -1;
	}
	host_addr.sin_family = AF_INET;
	host_addr.sin_port = htons(ROOTPORT);
	inet_pton(AF_INET, "127.0.0.1", &host_addr.sin_addr);
	if(bind(socketfd, (struct sockaddr*)&host_addr, sizeof(host_addr)) < 0) {
		fprintf(stderr, "Error in binding port to socket.\n");
		return -1;
	}
	while(1) {
		recvbytes = recvfrom(socketfd, buffer, sizeof(buffer), 0, (struct sockaddr*)&client_addr, &length);
		if(strncmp(buffer, "exit", sizeof("exit")) == 0){
			printf("exiting...\n");
			break;
		}        fprintf(stdout, "Request received for : %s.\n", buffer);
		FILE* fd = fopen("root.txt", "r");
		if(!fd) {
			fprintf(stderr, "Could not access DNS records.\n");
			sendto(socketfd, "ERROR", strlen("ERROR") + 1, 0, (struct sockaddr*)&client_addr, length);
			continue;
		}
		char linebuff[40], filebuff[400], ip[20], tempbuff[40], lastbuff[40];
		char *temp, *iptemp;
		int flag = 0, i;
		linebuff[0] = '\0';
		lastbuff[0] = '\0';
		filebuff[0] = '\0';
		ip[0] = '\0';
		while( fgets(linebuff, sizeof(linebuff), fd) ) {
			strcpy(tempbuff, linebuff);
			temp = strtok(tempbuff, " ");
			if(flag == 0 && strncmp(temp, buffer, strlen(temp)) == 0) {
				flag = 1;
				strcpy(lastbuff, linebuff);
				iptemp = strtok(NULL, "\n");
				for(i = 0; *iptemp != '\0'; i++, iptemp++)
					ip[i] = *iptemp;
				ip[i] = '\0';
			}
			else {
				strcat(filebuff, linebuff);
			}
		}
		fclose(fd);
		if(flag == 0) {
			sentbytes = sendto(socketfd, "404", strlen("404") + 1, 0, (struct sockaddr*)&client_addr, length);
			printf("not found..\n");
		}
		else {
			int fdes = open("root.txt", O_WRONLY);
			strcat(filebuff, lastbuff);
			write(fdes, filebuff, strlen(filebuff));
			close(fdes);
			fprintf(stdout, "Response : %s.\n\n", ip);
			sentbytes = sendto(socketfd, ip, strlen(ip) + 1, 0, (struct sockaddr*)&client_addr, length);
		}
	}
	close(socketfd);
	return 0;
}



root.txt

edu 54.245.23.23
org 4.34.24.1

com 10.2.4.14




tld_server.c


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <errno.h>
#define TLDPORT 1756
extern int errno;
int main() {
	int socketfd = 0, clientfd = 0, sentbytes, recvbytes;
	socklen_t length = sizeof(struct sockaddr_in);
	struct sockaddr_in host_addr, client_addr;
	char buffer[20];
	socketfd = socket(AF_INET, SOCK_DGRAM, 0);
	if(socketfd < 0) {
		fprintf(stderr, "Error in socket creation.\n");
		return -1;
	}
	host_addr.sin_family = AF_INET;
	host_addr.sin_port = htons(TLDPORT);
	inet_pton(AF_INET, "127.0.0.1", &host_addr.sin_addr);
	if(bind(socketfd, (struct sockaddr*)&host_addr, sizeof(host_addr)) < 0) {
		fprintf(stderr, "Error in binding port to socket.\n");
		return -1;
	}
	while(1) {
		recvbytes = recvfrom(socketfd, buffer, sizeof(buffer), 0, (struct sockaddr*)&client_addr, &length);
		if(strncmp(buffer, "exit", sizeof("exit")) == 0){
			printf("exiting...\n");
			break;
		}
		fprintf(stdout, "Request received for : %s.\n", buffer);
		FILE* fd = fopen("tld.txt", "r");
		if(!fd) {
			fprintf(stderr, "Could not access DNS records.\n");
			sendto(socketfd, "ERROR", strlen("ERROR") + 1, 0, (struct sockaddr*)&client_addr, length);
			continue;
		}
		char linebuff[40], filebuff[400], ip[20], tempbuff[40], lastbuff[40];
		char *temp, *iptemp;
		int flag = 0, i;
		linebuff[0] = '\0';
		lastbuff[0] = '\0';
		filebuff[0] = '\0';
		ip[0] = '\0';
		while( fgets(linebuff, sizeof(linebuff), fd) ) {
			strcpy(tempbuff, linebuff);
			temp = strtok(tempbuff, " ");
			if(flag == 0 && strncmp(temp, buffer, strlen(temp)) == 0) {
				flag = 1;
				strcpy(lastbuff, linebuff);
				iptemp = strtok(NULL, "\n");
				for(i = 0; *iptemp != '\0'; i++, iptemp++)
					ip[i] = *iptemp;
				ip[i] = '\0';
			}
			else {
				strcat(filebuff, linebuff);
			}
		}
		fclose(fd);
		if(flag == 0) {
			sentbytes = sendto(socketfd, "404", strlen("404") + 1, 0, (struct sockaddr*)&client_addr, length);
			printf("not found....\n");
		}
		else {
			int fdes = open("tld.txt", O_WRONLY);
			strcat(filebuff, lastbuff);
			write(fdes, filebuff, strlen(filebuff));
			close(fdes);
			fprintf(stdout, "Response : %s.\n\n", ip);
			sentbytes = sendto(socketfd, ip, strlen(ip) + 1, 0, (struct sockaddr*)&client_addr, length);
		}
	}
	close(socketfd);
	return 0;
}



tld.txt

baidu.com 75.67.34.14
yahoo.com 15.16.143.251

google.com 10.14.56.123





